#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'ruby_php_serialization/tokenizer'

module RubyPhpSerialization
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 59)
  
	def parse(string)
		@tokenizer = Tokenizer.new(string)
		do_parse
		return @object
	ensure
		@tokenizer = nil
	end
  
  def next_token
    @tokenizer.next_token
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    35,     8,    28,    12,    20,     8,    21,    12,     3,     4,
    22,    36,     8,    10,    12,    23,     1,     3,     4,    24,
    25,     8,    10,    12,    17,     1,     3,     4,    27,    19,
     8,    10,    12,    29,     1,    30,    31,    16,    18,    41,
    42,    15,    26 ]

racc_action_check = [
    33,    35,    22,    35,    10,    33,    12,    33,    41,    41,
    15,    33,    41,    41,    41,    16,    41,     0,     0,    17,
    19,     0,     0,     0,     5,     0,    42,    42,    21,     8,
    42,    42,    42,    27,    42,    28,    29,     4,     6,    38,
    40,     1,    20 ]

racc_action_pointer = [
    14,    36,   nil,   nil,    32,    24,    36,   nil,    24,   nil,
    -1,   nil,     1,   nil,   nil,     4,     9,    19,   nil,    14,
    36,    22,    -3,   nil,   nil,   nil,   nil,    28,    23,    26,
   nil,   nil,   nil,    -2,   nil,    -6,   nil,   nil,    37,   nil,
    38,     5,    23,   nil,   nil ]

racc_action_default = [
   -21,   -21,    -7,    -8,   -21,   -21,   -21,    -2,   -21,    -3,
   -21,    -4,   -21,    -5,    -6,   -21,   -21,   -21,    -1,   -21,
   -21,   -21,   -21,    -9,    45,   -10,   -11,   -21,   -21,   -21,
   -13,   -12,   -16,   -21,   -20,   -21,   -14,   -15,   -21,   -19,
   -21,   -21,   -21,   -17,   -18 ]

racc_goto_table = [
     6,    39,    38,    39,    40,    34,    33,    34,    32,    37,
     5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    43,    44 ]

racc_goto_check = [
     2,     5,    12,     5,    12,     8,     9,     8,    10,    11,
     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    10,     0,   nil,   nil,   -32,   nil,   nil,   -28,   -26,
   -22,   -24,   -31 ]

racc_goto_default = [
   nil,   nil,   nil,     7,     9,    11,    13,    14,     2,   nil,
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 15, :_reduce_1,
  1, 16, :_reduce_2,
  1, 16, :_reduce_3,
  1, 16, :_reduce_4,
  1, 16, :_reduce_5,
  1, 16, :_reduce_6,
  1, 16, :_reduce_7,
  1, 17, :_reduce_8,
  3, 18, :_reduce_9,
  3, 19, :_reduce_10,
  3, 20, :_reduce_11,
  5, 22, :_reduce_12,
  0, 24, :_reduce_13,
  8, 21, :_reduce_14,
  2, 23, :_reduce_15,
  0, 23, :_reduce_16,
  3, 25, :_reduce_17,
  4, 25, :_reduce_18,
  1, 26, :_reduce_19,
  1, 26, :_reduce_20 ]

racc_reduce_n = 21

racc_shift_n = 45

racc_token_table = {
  false => 0,
  :error => 1,
  ";" => 2,
  "N" => 3,
  "b" => 4,
  ":" => 5,
  :NUMBER => 6,
  "i" => 7,
  "d" => 8,
  "s" => 9,
  :STRING => 10,
  "a" => 11,
  "{" => 12,
  "}" => 13 }

racc_nt_base = 14

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\";\"",
  "\"N\"",
  "\"b\"",
  "\":\"",
  "NUMBER",
  "\"i\"",
  "\"d\"",
  "\"s\"",
  "STRING",
  "\"a\"",
  "\"{\"",
  "\"}\"",
  "$start",
  "serialization",
  "object",
  "null",
  "bool",
  "integer",
  "double",
  "array",
  "string",
  "array_items",
  "@1",
  "array_item",
  "array_key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 3)
  def _reduce_1(val, _values, result)
     @object = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 6)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_4(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 9)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_6(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 14)
  def _reduce_8(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 17)
  def _reduce_9(val, _values, result)
     result = Integer(val[2]) > 0 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_10(val, _values, result)
     result = Integer(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_11(val, _values, result)
     result = Float(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_12(val, _values, result)
     result = val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_13(val, _values, result)
     @numeric_array = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 31)
  def _reduce_14(val, _values, result)
    									if @numeric_array
										result = []
										val[6].each { |(i,v)| result[i] = v }
									else
										result = Hash[*val[6].flatten]
									end
								
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_15(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 41)
  def _reduce_16(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_17(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 45)
  def _reduce_18(val, _values, result)
     result = [val[1], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_20(val, _values, result)
     @numeric_array = false; result = val[0] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module RubyPhpSerialization
